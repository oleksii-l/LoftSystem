#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('loftsystem:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io').listen(server)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const connectedUsers = {}
const historyMessage = {}

io.on('connection', (socket) => {
  const socketId = socket.id
  socket.on('users:connect', function (data) {
    // { userId: '5e9483d6d96b341ba80bc28e', username: 'krab' }
    const user = { ...data, socketId, activeRoom: null }
    connectedUsers[socketId] = user
    socket.emit('users:list', Object.values(connectedUsers))
    socket.broadcast.emit('users:add', user)
  })
  socket.on('message:add', function (data) {
    // {senderId: '5e9483d6d96b341ba80bc28e', recipientId: '5e9483d6d96b341ba80bc28e', text: 'Hi'}
    console.log('message:add')
    console.log(data)
    const { senderId, recipientId } = data
    socket.emit('message:add', data)
    socket.broadcast.to(data.roomId).emit('message:add', data)
    addMessageToHistory(senderId, recipientId, data)
    addMessageToHistory(recipientId, senderId, data)
  })
  socket.on('message:history', function (data) {
    // {recipientId: '5e9483d6d96b341ba80bc28e', userId: '5e9483d6d96b341ba80bc28e'}
    console.log('message:history')
    console.log(data)
    console.log(historyMessage)
    if (
      historyMessage[data.userId] &&
      historyMessage[data.userId][data.recipientId]
    ) {
      socket.emit(
        'message:history',
        historyMessage[data.userId][data.recipientId],
      )
      console.log(historyMessage[data.userId][data.recipientId])
    }
  })
  socket.on('disconnect', function (data) {
    delete connectedUsers[socketId]
    socket.broadcast.emit('users:leave', socketId)
  })
})

const addMessageToHistory = (senderId, recipientId, data) => {
  if (historyMessage[senderId]) {
    if (historyMessage[senderId][recipientId]) {
      if (historyMessage[senderId][recipientId].length > 10) {
        historyMessage[senderId][recipientId].shift()
      }
      historyMessage[senderId][recipientId].push(data)
    } else {
      historyMessage[senderId][recipientId] = []
      historyMessage[senderId][recipientId].push(data)
    }
  } else {
    historyMessage[senderId] = {}
    historyMessage[senderId][recipientId] = []
    historyMessage[senderId][recipientId].push(data)
  }
}
